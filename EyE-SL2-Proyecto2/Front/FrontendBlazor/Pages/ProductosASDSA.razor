@page "/productos"
@using FrontendBlazor.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h2>Lista de Productos</h2>
<!-- Botón de inicio -->
<button class="btn btn-info mb-3" @onclick="IrAlInicio">Inicio</button>

@if (productos == null)
{
    <p><em>Cargando productos...</em></p>
}
else
{
    <div class="container mt-4">
        <button class="btn btn-success mb-3" @onclick="CrearProducto">Agregar Producto</button>
        <table class="table table-striped mt-3">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Precio</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var producto in productos)
                {
                    <tr>
                        <td>@producto.Id</td>
                        <td>@producto.Nombre</td>
                        <td>@producto.Precio</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditarProducto(producto.Id)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarProducto(producto.Id)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Producto> productos;

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        try
        {
            productos = await Http.GetFromJsonAsync<List<Producto>>("https://localhost:7106/api/productos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar productos: {ex.Message}");
        }
    }

    private void EditarProducto(int id)
    {
        NavigationManager.NavigateTo($"/producto/{id}");
    }

    private async Task EliminarProducto(int id)
    {
        try
        {
            await Http.DeleteAsync($"https://localhost:7106/api/productos/{id}");
            await CargarProductos(); // Recargar los productos después de eliminar
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar producto: {ex.Message}");
        }
    }

    private void CrearProducto()
    {
        NavigationManager.NavigateTo("/producto/0"); // Redirige al formulario de creación
    }

    private void IrAlInicio()
    {
        NavigationManager.NavigateTo("/"); // Navegar a la página de inicio
    }
}



